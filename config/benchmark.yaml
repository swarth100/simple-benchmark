reference_module: "benchmarks.reference"

user_modules:
  - "benchmarks.team01"
  - "benchmarks.team02"
  - "benchmarks.team03"

benchmarks:
  - function_name: "square"
    description: Print a square of a given size.
    max_time: 100
    args:
      - name: "size"
        description: "The size of the square's sides."
        increment: "lambda x: x + 1"
        default: "int(1)"

  - function_name: "triangle"
    description: Print a right-angled triangle with stars.
    max_time: 100
    args:
      - name: "size"
        description: "The height of the triangle."
        increment: "lambda x: x + 1"
        default: "int(1)"

  - function_name: "rhombus"
    description: Print a rhombus pattern.
    max_time: 100
    args:
      - name: "size"
        description: "The size of the rhombus."
        increment: "lambda x: x + 1"
        default: "int(1)"

  - function_name: "running_sum"
    description: Return the (cumulative) running sum of a list.
    max_time: 50
    args:
      - name: "size"
        increment: "lambda x: x + 1"
        default: "int(4)"
        hidden: true
      - name: "nums"
        description: "The list of integers for calculating the running sum."
        increment: "lambda **kwargs: [random.randint(0, 100) for _ in range(kwargs['size'])]"
        default: "list([2,5,3,1])"

  - function_name: "histogram"
    description: Print a histogram from a list of numbers.
    max_time: 50
    args:
      - name: "size"
        increment: "lambda x: x + 1"
        default: "int(3)"
        hidden: true
      - name: "nums"
        description: "The list of numbers for generating a histogram."
        increment: "lambda **kwargs: [random.randint(0, 10) for _ in range(kwargs['size'])]"
        default: "list([4,1,2])"

  - function_name: "scatter"
    description: Print a scatter plot of points of a given size.
    max_time: 50
    args:
      - name: "x"
        increment: "lambda x: x + 1"
        default: "int(10)"
        hidden: true
      - name: "size"
        description: "The size of the scatter plot."
        increment: "lambda **kwargs: int(kwargs['x'] ** 0.65)"
        default: "int(4)"
      - name: "points"
        description: "The list of points as tuples for the scatter plot."
        increment: "lambda **kwargs: [[random.randint(1, kwargs['size']), random.randint(1, kwargs['size'])] for _ in range(random.randint(1, kwargs['size'] + 1))]"
        default: "list([[2,2],[1,3],[4,1]])"

  - function_name: "count_pairs"
    description: Return the count of pairs of numbers that differ by a specific amount.
    max_time: 50
    args:
      - name: "size"
        increment: "lambda x: x + 1"
        default: "int(4)"
        hidden: true
      - name: "nums"
        description: "The list of numbers to count pairs from."
        increment: "lambda **kwargs: [random.randint(0, kwargs['size'] // 2) for _ in range(kwargs['size'])]"
        default: "list([1,2,2,1])"
      - name: "k"
        description: "The difference value for counting pairs."
        increment: "lambda **kwargs: random.randint(1, kwargs['size'] // 2)"
        default: "int(1)"

  - function_name: "dividing_numbers"
    description: Return a list of all self-dividing numbers in a range.
    max_time: 50
    args:
      - name: "size"
        increment: "lambda x: x + 1"
        default: "int(10)"
        hidden: true
      - name: "left"
        description: "The left boundary of the range."
        increment: "lambda **kwargs: random.randint(0, kwargs['size'] // 2)"
        default: "int(0)"
      - name: "right"
        description: "The right boundary of the range."
        increment: "lambda **kwargs: random.randint(kwargs['size'] // 2, kwargs['size'])"
        default: "int(10)"

  - function_name: "generate_trajectory"
    description: Print the trajectory of a projectile which is launched with a given angle and velocity.
    max_time: 50
    args:
      - name: "x"
        increment: "lambda x: x + 1"
        default: "int(25)"
        hidden: true
      - name: "velocity"
        description: "The initial velocity of the projectile."
        increment: "lambda **kwargs: int(kwargs['x'] * (0.1 + random.random()))"
        default: "int(15)"
      - name: "angle"
        description: "The angle of projection."
        increment: "lambda angle: int(45 + (random.random() - 0.5) * 45)"
        default: "int(45)"
      - name: "size"
        description: "The size of the simulation area."
        increment: "lambda **kwargs: [random.randint(kwargs['x'], int(kwargs['x'] * 1.5)), random.randint(kwargs['x'] // 3, kwargs['x'] // 1.5)]"
        default: "list([25, 8])"

  - function_name: "sort_by_height"
    description: Return a list of people sorted by corresponding heights.
    max_time: 10
    args:
      - name: "x"
        increment: "lambda x: x + 1"
        default: "int(3)"
        hidden: true
      - name: "names"
        description: "The list of names."
        increment: "lambda **kwargs: [fake.first_name() for _ in range(kwargs['x'])]"
        default: "list(['Alice', 'Bob', 'Charlie'])"
      - name: "heights"
        description: "The list of corresponding heights."
        increment: "lambda **kwargs: [random.randint(150, 200) for _ in range(kwargs['x'])]"
        default: "list([165, 180, 175])"

  - function_name: "best_student"
    description: Return the name of the student with the highest average grade.
    max_time: 15
    args:
      - name: "x"
        increment: "lambda x: x + 1"
        default: "int(3)"
        hidden: true
      - name: "offsets"
        increment: "lambda **kwargs: [random.randint(2, 7) for _ in range(kwargs['x'])]"
        default: "list([4, 5, 4])"
        hidden: true
      - name: "gradebook"
        description: "The dictionary containing student names and their grades."
        increment: "lambda **kwargs: {
                      fake.first_name(): [
                        round(random.uniform(0, 3) + kwargs['offsets'][idx], 1) for _ in range(random.randint(1, int(kwargs['x'] ** 1.15 // 3 + 1)))
                      ] for idx in range(kwargs['x'])
                    }"
        default: "dict({'Alice': [8, 7.5, 8.8],'Bob': [8.5, 8, 9],'Charlie': [6, 6.2, 7.5]})"

  - function_name: "jobs_counter"
    description: Return a dictionary with the count of occurrences for each job in a list.
    max_time: 10
    args:
      - name: "x"
        increment: "lambda x: x + 1"
        default: "int(9)"
        hidden: true
      - name: "elems"
        increment: "lambda **kwargs: [fake.job() for _ in range(int(kwargs['x'] ** 0.5))]"
        default: "list(['artist', 'doctor', 'professor'])"
        hidden: true
      - name: "jobs"
        description: "The list of jobs."
        increment: "lambda **kwargs: [
                      kwargs['elems'][int(random.randint(0, len(kwargs['elems']) - 1))] for _ in range(int(kwargs['x'] ** 1.15))
                    ]"
        default: "list(['artist', 'doctor', 'artist', 'professor', 'artist', 'professor', 'professor', 'artist'])"
